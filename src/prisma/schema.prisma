generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id             String          @id @default(uuid())
  name           String
  username       String          @unique
  photoUrl       String          @default("")
  bio            String          @default("")
  email          String          @unique
  emailVerified  Boolean         @default(false)
  hashedPassword String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sessions       Session[]
  role           Role            @default(USER)
  passwordResets PasswordReset[]
  posts          Post[]
  comments       Comment[]
}

enum Role {
  ADMIN
  AUTHOR
  FRIEND
  USER
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  userAgent String
}

model PasswordReset {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model ShortLink {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  url       String   @db.VarChar(2000)
  slug      String   @unique

  @@index(slug)
}

model Category {
  id    String @id @default(uuid())
  name  String
  slug  String @unique
  posts Post[]
}

model Post {
  id           String    @id @default(uuid())
  author       User      @relation(fields: [userId], references: [id])
  userId       String
  title        String
  slug         String    @unique
  exerpt       String
  category     Category  @relation(fields: [categorySlug], references: [slug])
  categorySlug String
  thumbnailUrl String
  content      String
  published    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  comments     Comment[]

  @@index([slug])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  content   String
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postSlug], references: [slug])
  postSlug  String
}
